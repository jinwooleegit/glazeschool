# 도자기 유약 입문서 웹사이트 개발 기획서 (GitHub + Cursor AI 환경용)

## 1. 개발 환경 및 접근 방식

### 1.1 개발 환경 개요
- **개발 도구**: Cursor AI (AI 기반 코드 생성 및 편집 도구)
- **코드 저장소**: GitHub 저장소
- **테스트 환경**: GitHub Pages (정적 웹사이트 호스팅)
- **개발 방식**: 프론트엔드 중심 개발 (클라이언트 사이드 로직)

### 1.2 기술적 제약사항
- GitHub Pages에서는 서버 사이드 코드 실행 불가능
- 동적 데이터베이스 직접 연결 불가능
- 백엔드 API 서버 구축 제한됨
- 대용량 데이터 처리 및 복잡한 계산의 성능 한계

### 1.3 대안적 접근 방식
- 정적 데이터 파일(JSON) 활용
- 클라이언트 사이드 로직 최대 활용
- 필요시 서버리스 기능 활용 (Firebase, Netlify 등)
- 점진적 기능 확장 전략

## 2. 단계별 개발 계획

### Phase 1: 기본 웹사이트 구조 및 콘텐츠 (2-3주)

#### 2.1 GitHub 저장소 설정
- **작업 내용**:
  * GitHub 저장소 생성 및 초기화
  * GitHub Pages 설정
  * 기본 프로젝트 구조 정의

- **Cursor AI 활용 방법**:
  * 기본 HTML/CSS/JS 파일 구조 생성
  * .gitignore 및 README.md 파일 작성
  * 초기 index.html 템플릿 생성

#### 2.2 정적 웹사이트 프레임워크 설정
- **기술 선택**:
  * 가벼운 프론트엔드 프레임워크: Vue.js 또는 React.js
  * 정적 사이트 생성기 옵션: Vite, Next.js(정적 내보내기)
  * CSS 프레임워크: Tailwind CSS 또는 Bootstrap

- **개발 코드 예시** (Cursor AI로 생성):
```bash
# Vue.js + Vite 프로젝트 초기화 명령어
npm create vite@latest glaze-guide -- --template vue
cd glaze-guide
npm install
```

#### 2.3 기본 페이지 구조 개발
- **작업 내용**:
  * 메인 페이지 레이아웃
  * 내비게이션 메뉴
  * 반응형 디자인 적용
  * 기본 라우팅 구성

- **Cursor AI 활용**:
  * 컴포넌트 구조 설계 및 생성
  * 반응형 레이아웃 CSS 생성
  * 기본 UI 요소 구현

### Phase 2: 콘텐츠 관리 및 데이터 구조 (3-4주)

#### 2.1 정적 데이터 구조 설계
- **작업 내용**:
  * JSON 형식의 유약 데이터 구조 설계
  * 이미지 및 미디어 자산 구조화
  * 콘텐츠 마크다운 파일 구성

- **데이터 구조 예시** (Cursor AI로 생성):
```json
{
  "glazes": [
    {
      "id": "transparent-base",
      "name": "기본 투명유",
      "category": "transparent",
      "difficulty": "beginner",
      "temperature": "high-fire",
      "components": [
        {"name": "규석", "percentage": 40},
        {"name": "장석", "percentage": 30},
        {"name": "카올린", "percentage": 15},
        {"name": "석회석", "percentage": 15}
      ],
      "description": "가장 기본적인 투명유 레시피로, 다양한 용도로 활용 가능합니다.",
      "instructions": "모든 재료를 함께 혼합하고 80-100메쉬의 체로 걸러주세요...",
      "imageUrl": "assets/images/glazes/transparent-base.jpg",
      "results": [
        {"temperature": 1220, "atmosphere": "oxidation", "imageUrl": "assets/images/results/transparent-base-ox-1220.jpg"},
        {"temperature": 1250, "atmosphere": "reduction", "imageUrl": "assets/images/results/transparent-base-red-1250.jpg"}
      ]
    }
  ]
}
```

#### 2.2 정적 콘텐츠 페이지 개발
- **작업 내용**:
  * 유약 이론 페이지
  * 재료 및 도구 소개 페이지
  * 기본 레시피 목록 페이지
  * 제작 및 적용 방법 페이지

- **Cursor AI 활용**:
  * 마크다운 파서 구현
  * 콘텐츠 템플릿 생성
  * 정적 데이터 로딩 및 표시 로직

### Phase 3: 기본 인터랙티브 기능 개발 (4-6주)

#### 3.1 기본 유약 레시피 계산기
- **작업 내용**:
  * 간단한 유약 성분 계산 기능
  * 비율 조정 및 시각화
  * 결과 저장 및 공유 기능

- **기술적 접근**:
  * 클라이언트 사이드 JavaScript로 계산 구현
  * 로컬 스토리지를 활용한 데이터 저장
  * Canvas 또는 SVG를 활용한 시각화

- **JavaScript 코드 예시** (Cursor AI로 생성):
```javascript
// 유약 계산기 클래스
class GlazeCalculator {
  constructor(baseRecipe, quantity = 1000) {
    this.baseRecipe = baseRecipe;
    this.quantity = quantity;
    this.adjustedRecipe = {};
    this.recalculate();
  }
  
  // 재료 비율 조정 메서드
  adjustMaterial(materialName, percentage) {
    this.baseRecipe[materialName] = percentage;
    this.recalculate();
    return this.adjustedRecipe;
  }
  
  // 전체 양에 따른 재계산
  recalculate() {
    const total = Object.values(this.baseRecipe).reduce((sum, val) => sum + val, 0);
    this.adjustedRecipe = {};
    
    for (const [material, percentage] of Object.entries(this.baseRecipe)) {
      this.adjustedRecipe[material] = (percentage / total) * this.quantity;
    }
    
    return this.adjustedRecipe;
  }
  
  // 결과를 로컬 스토리지에 저장
  saveRecipe(name) {
    const savedRecipes = JSON.parse(localStorage.getItem('savedGlazeRecipes') || '{}');
    savedRecipes[name] = {
      baseRecipe: {...this.baseRecipe},
      quantity: this.quantity,
      timestamp: new Date().toISOString()
    };
    localStorage.setItem('savedGlazeRecipes', JSON.stringify(savedRecipes));
  }
}
```

#### 3.2 간단한 삼각좌표 시각화 도구
- **작업 내용**:
  * 2D Canvas 기반 삼각좌표 시각화
  * 좌표 지점 클릭 및 드래그 기능
  * 좌표 값 표시 및 변환 기능

- **기술적 접근**:
  * HTML5 Canvas API 활용
  * 마우스/터치 이벤트 처리
  * 클라이언트 사이드 좌표 계산 알고리즘

- **Canvas 코드 예시** (Cursor AI로 생성):
```javascript
// 삼각좌표 시각화 클래스
class TriaxialCanvas {
  constructor(canvasElement) {
    this.canvas = canvasElement;
    this.ctx = this.canvas.getContext('2d');
    this.points = [];
    this.isDragging = false;
    this.currentPoint = null;
    
    this.setupCanvas();
    this.addEventListeners();
    this.draw();
  }
  
  setupCanvas() {
    // Canvas 크기 설정 및 초기화
    this.canvas.width = this.canvas.clientWidth;
    this.canvas.height = this.canvas.clientHeight;
    
    // 중심점 및 삼각형 크기 계산
    this.centerX = this.canvas.width / 2;
    this.centerY = this.canvas.height / 2;
    this.radius = Math.min(this.centerX, this.centerY) * 0.8;
  }
  
  drawTriangle() {
    // 삼각좌표 시스템의 기본 삼각형 그리기
    this.ctx.beginPath();
    this.ctx.moveTo(this.centerX, this.centerY - this.radius); // 상단 꼭지점
    this.ctx.lineTo(this.centerX - this.radius * 0.866, this.centerY + this.radius * 0.5); // 좌하단
    this.ctx.lineTo(this.centerX + this.radius * 0.866, this.centerY + this.radius * 0.5); // 우하단
    this.ctx.closePath();
    this.ctx.stroke();
    
    // 눈금 및 레이블 추가
    // ...
  }
  
  addPoint(x, y) {
    // 클릭 위치를 삼각좌표로 변환하여 포인트 추가
    const coords = this.pixelToTriaxial(x, y);
    if (this.isInsideTriangle(coords)) {
      this.points.push(coords);
      this.draw();
      return coords;
    }
    return null;
  }
  
  // 픽셀 좌표를 삼각좌표로 변환
  pixelToTriaxial(x, y) {
    // 변환 로직 구현
    // ...
  }
  
  // 이벤트 리스너 추가
  addEventListeners() {
    this.canvas.addEventListener('mousedown', this.handleMouseDown.bind(this));
    this.canvas.addEventListener('mousemove', this.handleMouseMove.bind(this));
    this.canvas.addEventListener('mouseup', this.handleMouseUp.bind(this));
    // 터치 이벤트도 추가
  }
  
  // 그리기 메서드
  draw() {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.drawTriangle();
    this.drawPoints();
  }
}
```

#### 3.3 유약 갤러리 및 결과 시각화
- **작업 내용**:
  * 유약 결과 이미지 갤러리
  * 필터링 및 정렬 기능
  * 기본 이미지 확대/축소 보기

- **기술적 접근**:
  * Lightbox 또는 이미지 갤러리 라이브러리 활용
  * 클라이언트 사이드 필터링 및 정렬
  * 지연 로딩 기법 적용

### Phase 4: 사용자 경험 향상 및 추가 기능 (4-5주)

#### 4.1 로컬 스토리지 활용 사용자 데이터 관리
- **작업 내용**:
  * 사용자 학습 진도 저장
  * 유약 레시피 저장 및 관리
  * 즐겨찾기 및 노트 기능

- **기술적 접근**:
  * 브라우저 localStorage/IndexedDB 활용
  * JSON 형식 데이터 구조 설계
  * 가져오기/내보내기 기능

- **코드 예시** (Cursor AI로 생성):
```javascript
// 사용자 데이터 관리 클래스
class UserDataManager {
  constructor() {
    this.storageKey = 'glazeGuideUserData';
    this.userData = this.loadUserData();
  }
  
  loadUserData() {
    try {
      const data = localStorage.getItem(this.storageKey);
      return data ? JSON.parse(data) : this.createDefaultUserData();
    } catch (e) {
      console.error('Failed to load user data:', e);
      return this.createDefaultUserData();
    }
  }
  
  saveUserData() {
    try {
      localStorage.setItem(this.storageKey, JSON.stringify(this.userData));
      return true;
    } catch (e) {
      console.error('Failed to save user data:', e);
      return false;
    }
  }
  
  createDefaultUserData() {
    return {
      progress: {},
      savedRecipes: {},
      favorites: [],
      notes: {},
      lastVisit: new Date().toISOString()
    };
  }
  
  // 학습 진도 관련 메서드
  updateProgress(moduleId, status) {
    if (!this.userData.progress[moduleId]) {
      this.userData.progress[moduleId] = { completed: false, visited: 0 };
    }
    
    this.userData.progress[moduleId].visited++;
    if (status === 'completed') {
      this.userData.progress[moduleId].completed = true;
    }
    
    return this.saveUserData();
  }
  
  // 다른 데이터 관리 메서드들...
}
```

#### 4.2 오프라인 지원 및 PWA 기능
- **작업 내용**:
  * 서비스 워커 구현
  * 오프라인 캐싱 전략
  * 기본 PWA 설정

- **기술적 접근**:
  * 서비스 워커 스크립트 작성
  * 매니페스트 파일 구성
  * 캐싱 전략 구현

- **서비스 워커 코드 예시** (Cursor AI로 생성):
```javascript
// service-worker.js
const CACHE_NAME = 'glaze-guide-cache-v1';
const URLS_TO_CACHE = [
  '/',
  '/index.html',
  '/css/main.css',
  '/js/app.js',
  '/data/glazes.json',
  '/data/materials.json',
  // 기타 정적 리소스...
];

// 서비스 워커 설치 시 리소스 캐싱
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Cache opened');
        return cache.addAll(URLS_TO_CACHE);
      })
  );
});

// 네트워크 요청 가로채기
self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // 캐시에서 찾으면 반환
        if (response) {
          return response;
        }
        
        // 캐시에 없으면 네트워크에서 가져오기
        return fetch(event.request).then(
          response => {
            // 유효한 응답이 아니면 그냥 반환
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }
            
            // 응답을 복제하여 캐시에 저장
            const responseToCache = response.clone();
            caches.open(CACHE_NAME)
              .then(cache => {
                cache.put(event.request, responseToCache);
              });
              
            return response;
          }
        );
      })
  );
});
```

#### 4.3 간단한 사용자 상호작용 기능
- **작업 내용**:
  * 소셜 미디어 공유 버튼
  * 피드백/설문 양식
  * 외부 리소스 링크 통합

- **기술적 접근**:
  * 웹 공유 API 활용
  * 정적 양식 + Formspree/Netlify Forms 활용
  * 외부 리소스 임베딩

### Phase 5: 고급 기능 및 최적화 (선택적, 4-6주)

#### 5.1 외부 서비스 통합 (선택적)
- **작업 내용**:
  * Firebase/Netlify 서버리스 기능 통합
  * 기본 사용자 인증 시스템
  * 간단한 데이터 동기화

- **기술적 접근**:
  * Firebase Authentication 및 Firestore
  * Netlify Functions/Identity
  * GitHub OAuth 통합

#### 5.2 성능 최적화
- **작업 내용**:
  * 이미지 최적화 및 지연 로딩
  * JavaScript 번들 최적화
  * 페이지 로드 성능 개선

- **기술적 접근**:
  * 이미지 포맷 최적화 (WebP)
  * 코드 스플리팅/지연 로딩
  * 리소스 우선순위 설정

#### 5.3 접근성 및 국제화 (선택적)
- **작업 내용**:
  * 웹 접근성 개선
  * 다국어 지원 기초 작업
  * 색상 대비 및 폰트 조정 기능

- **기술적 접근**:
  * ARIA 속성 구현
  * 간단한 다국어 지원 시스템
  * 테마 전환 기능

## 3. GitHub Pages 배포 및 테스트 계획

### 3.1 GitHub Pages 배포 설정
- **작업 내용**:
  * GitHub Actions 워크플로우 설정
  * 자동 빌드 및 배포 파이프라인
  * 도메인 설정 (선택적)

- **워크플로우 파일 예시** (Cursor AI로 생성):
```yaml
# .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: dist
          branch: gh-pages
```

### 3.2 테스트 전략
- **수동 테스트**:
  * 주요 브라우저(Chrome, Firefox, Safari, Edge) 호환성 테스트
  * 모바일 장치 테스트
  * 기능 검증 체크리스트

- **자동화 테스트 (선택적)**:
  * 기본 Jest 단위 테스트
  * Cypress 기본 E2E 테스트
  * Lighthouse 성능 테스트

### 3.3 피드백 수집 및 반영
- **피드백 채널 설정**:
  * GitHub Issues 활용
  * 간단한 피드백 양식
  * 분석 도구 통합 (Google Analytics)

- **반복 개선 과정**:
  * 격주 또는 월간 개선 사이클
  * 기능 우선순위 조정
  * 사용자 요구사항 반영

## 4. Cursor AI 활용 전략

### 4.1 코드 생성 최적화
- **효과적인 프롬프트 전략**:
  * 명확한 요구사항 정의
  * 컴포넌트/기능 단위 생성
  * 코드 스타일 지정

- **코드 리뷰 및 리팩토링**:
  * AI 생성 코드 검증
  * 성능 및 가독성 개선
  * 일관된 코딩 스타일 유지

### 4.2 문제 해결 지원
- **디버깅 지원**:
  * 오류 메시지 분석 요청
  * 해결책 제안 요청
  * 코드 최적화 제안

- **학습 자원**:
  * 관련 기술 학습 자료 요청
  * 코드 설명 및 주석 생성
  * 모범 사례 추천

## 5. 개발 일정 및 마일스톤

### 5.1 Phase 1: 기본 웹사이트 구조 (2-3주)
- Week 1: 프로젝트 설정 및 기본 구조
- Week 2-3: 메인 레이아웃 및 페이지 구성

### 5.2 Phase 2: 콘텐츠 및 데이터 (3-4주)
- Week 4-5: 데이터 구조 및 기본 콘텐츠 
- Week 6-7: 콘텐츠 페이지 개발

### 5.3 Phase 3: 기본 인터랙티브 기능 (4-6주)
- Week 8-9: 유약 계산기 개발
- Week 10-11: 삼각좌표 도구 개발
- Week 12-13: 갤러리 및 시각화 기능

### 5.4 Phase 4: 사용자 경험 향상 (4-5주)
- Week 14-15: 로컬 스토리지 기능
- Week 16-17: 오프라인 지원 및 PWA
- Week 18: 사용자 상호작용 기능

### 5.5 Phase 5: 고급 기능 및 최적화 (선택적, 4-6주)
- Week 19-20: 외부 서비스 통합 (선택적)
- Week 21-22: 성능 최적화
- Week 23-24: 접근성 및 국제화 (선택적)

## 결론

본 기획서는 GitHub 저장소와 GitHub Pages, 그리고 Cursor AI를 활용한 도자기 유약 입문서 웹사이트 개발을 위한 현실적인 접근 방식을 제시합니다. 정적 웹사이트 호스팅 환경의 제약을 고려하여 클라이언트 사이드 기술을 중심으로 구성하되, 필요한 경우 서버리스 서비스를 선택적으로 활용하는 전략을 제안합니다.

Cursor AI를 통해 효율적으로 코드를 생성하고, 단계적으로 기능을 확장해 나가는 방식으로 개발 복잡성을 관리할 수 있을 것입니다. 이 접근 방식은 특히 제한된 백엔드 기능에도 불구하고 유약 입문서에 필요한 핵심 기능을 효과적으로 구현할 수 있도록 합니다.

개발자는 프로젝트 진행 중 발생하는 기술적 제약이나 새로운 요구사항에 유연하게 대응하며, 지속적인 피드백을 통해 사용자 중심의 웹사이트를 구축해 나갈 수 있을 것입니다.